#######################################################################
本任务有两块目标需要解决：
 1.准确性 即：检测是否准确 --> 多类别+小目标+其他
 2.实时性 即：检测是否快 --> 加快推理速度 --> 轻量化方向 backbone + 其他
#######################################################################


记录一下实验

一.目前可以运行的块 .yaml文件  直接在trainds.py文件中调用就行

#########################backbone部分###########################

yolov5l_botnet.yaml --添加botnet块
convet.yaml  --添加conet块
MobileOne.yaml --轻量化的backbone结构 推理速度加快, 实际效果不理想 下降好几个点 查询之后：RepVgg对小目标并不友好
ConvNextBlock.yaml  ---不咋地
Yolov5_repvgg.yaml  ---不咋地

#########################head部分############3##################
yolov5_CNeB.yaml ---
CBAM.yaml  --添加的CBAM块
small.yaml --用于小目标检测的块
smallCBAM.yaml --小目标和注意力机制的融合体
yolov5_CNeB.yaml --有效果 提升2个点
yolov5_CNeB_CBAM_aspp.yaml  --不怎么样 没有效果  而且大幅度增加Gflops
yolov5_C3HB.yanml   ----不怎么样 没有效果 


试一试：gnconv!!!

#########################分割部分###############################

#########################损失函数部分###########################


二、#####如果需要加入某些块######
需要按照操作完成以下步骤：
step1: 将该块的构建文件代码导入到common.py文件中  (某一些是不需要的，比如small.yaml，因为本身在small.yaml层中的块在本来的common.py中都定义有)

step2: 将该块的配置文件.yaml文件，复制到一个新的yaml(重新命名的.yaml）文件中。
       由于有一些网上给的.yaml文件后面标注的层数不一定是正确的 因此需要重新检查一遍；
       这里注意:一定要数一下你的yaml文件的检测层最后一层是多少层 --> step4 138行
       同时注意：一定要数一下你的yaml文件中的分割层最后一层是多少层 --> step4 138行

step3: 在yolodhs.py文件中的解析文件中加入该块的名字
       有的块需要加两个地方，不需要在下面的代码中加上任何代码
       有的块需要加一个地方，同时在下面的加的地方下面加上代码
       
step4: 在yolodhs.py在yolodhs.py文件中的（相当重要！！！，不然不会报错：model has no stride)
       138行修改为自己的检测和分割网络的配置文件的行数
       139行修改为自己检测网络的行数
step5: .yaml文件  插入某一层之后，那么该层之后的from都要+1  比如原来是[-1,12] 如果在12层之前加入一层，那么该层应该变成[-1,13] 后面的都以此类推

step6: 修改分割头的连接处。分割头的第一层具体来自于哪一层要看前面backbone。
   一般是这样的：[[-1,6], 1, Concat, [1]] 或者这样 [[-1,4], 1, Concat, [1]]
   其实具体来说就是因为分割头的第一层是[[16, 1, Conv, [256,3,1]] 表示输出channel是256,而来自他前面的16层是512.也就是说不管前面的backbone怎么变化
   传给分割头第一层的那层的channel一定是512层，还是Concat起来的！！！！！！
   所以这里一定要根据backbone变化而修改！！！
   
   
注意：
1. 新加的块的个数如果不止一个的话，那么两个if必须都要添加。第一个if是用来获取该层的输入和输出通道的；第二个if是用来计算该层中该块有多少个（有一个缩放因子）
2. .yaml文件中的每一行中的最后面args表示该层模块所需要传入的参数；
   也就是说如果args中的数字是一个的话，如：[128]]，说明该层模块需要传入一个参数；
   也就是说如果args中的数字不是一个的话，如[256, 3, 2]]说明该层模块需要传入三个参数；

三、运行：
（本实验的基础网络都是yolov5l版本，预训练权重均为yolov5l.pt;同时，在检测头方面，目前使用的是segheads.yaml，后面可能会进行一定的改进）

python trainds.py --cfg xxx.yaml

四、补充：
这里写一些补充知识，主要针对的是模型修改部分
1、首先是common.py文件,该文件是模型的配置文件。如果需要修改模型的结构，比如自己的一些想法，都可以基于某一个块进行修改。或者自己有想法，重新命名，当作一个新的块加入到common.py中；
2、其次是针对的yolodhs.py文件。该文件是模型的解析文件，主要是在common.py文件中解析相应的块。这里要说明一下区别
 2.1 如果解析文件中的模块通道有的话，就直接使用解析文件中的模块下面的。这些是通道的参数配置。
 if m in [CoT3, Conv, GhostConv, Bottleneck, GhostBottleneck, SPP, SPPF, DWConv, MixConv2d, Focus, CrossConv,
                 BottleneckCSP, C3, C3TR, C3SPP, C3Ghost, BoT3, CBAM]: # 公用一个通道配置
                 这些块的通道参数配置都是下面一样的。这样的话直接使用下面的就好。
                 此时，只需要将common中的块的名称复制到这些块当中，例如CBAM块就是新加的。
                 当然了，有一些块既要在此时里面加也要在 if m in [CoT3, BottleneckCSP, C3, C3TR, C3Ghost, BoT3]:里面加入。因为该块也要满足下面自己下面的参数配置
 c1, c2 = ch[f], args[0]
            if c2 != no:  # if not output
                c2 = make_divisible(c2 * gw, 8)
 2.2 如果解析文件中的模块通道没有的话
     此时，这个时候就需要按照elif 单独来给通道的配置。比如像BatchNorm2d、Concat、Detect等这些块在上面的配置文件中并没有。故：
     需要自己补充它的通道设置。
     但是也要注意的是：不需要在上面的if m in[]中做补充！！！因为如果在上面补充的话，相当于通道配置就是按照上面配置来的，但是自己也设置了通道
     因此，要按照自己的设置的通道配置来。也就是按照自己的elif来！！！！！！
 
 综上所述：一共有三种情况：
 A:直接加在解析函数if m in [CoT3, Conv, GhostConv, Bottleneck, GhostBottleneck, SPP, SPPF, DWConv, MixConv2d, Focus, CrossConv,
                 BottleneckCSP, C3, C3TR, C3SPP, C3Ghost, BoT3, CBAM]中：此时只需要一个配置参数；
 B:直接加在解析函数if m in [CoT3, Conv, GhostConv, Bottleneck, GhostBottleneck, SPP, SPPF, DWConv, MixConv2d, Focus, CrossConv,
                 BottleneckCSP, C3, C3TR, C3SPP, C3Ghost, BoT3, CBAM]和if m in [CoT3, BottleneckCSP, C3, C3TR, C3Ghost, BoT3]中。此时需要两个配置参数；
 C:直接加在elif中，此时需要自己的类名和自己的通道配置；不要在上面的两个解析参数中配置！！！
 ########################################################################################
 
